#summary A guide to common JAASmine use cases.
#labels Restrict-View-Commit

<wiki:toc max_depth="2"/>

= Getting Started =
JAASmine use cases may require one or more of the following:

== create an ActiveDirectory account ==
create an ActiveDirectory account using the active directory users and computers administration application.

you can create either a computer or user account.  there are no strict rules about when to use either one, but there are some considerations that may lead you to choose one over the other:
 # computer accounts do not have associated passwords, so an authentication credential will require a keytab; whereas user accounts have a traditional principal/password credential that can facilitate interactive authN or programmatic authN like basic auth and otherwise.
 # computer accounts have a minimal number of attributes; whereas user accounts have many associated attributes like firstname, lastname, middlename, emailaddress, etc.  some automation accounts may not have sensible values for these attributes (although, some of them can be left blank, as we'll demonstrate later).
 # computer accounts do not support the des-cbc-md5 encryption type; when your service requires this type, you must choose a user account.
 # user accounts can be used to login to windows workstations for various purposes, including password changes; therefore, it is important to note that changing a password on a user account will invalidate a keytab, so user accounts with keytabs have a higher risk of inadvertent human error reeking havoc in a way that is not easy to troubleshoot.

other points of interest:
 * all Active
 * the ActiveDirectory account name (NetBIOS name) is limited to 15 characters.  the ActiveDirectory users and computers administration application will allow you to create longer names; however, you will need to use the truncated "pre-Windows 2000" name when using the ktpass, setspn, and other command line utilities.  therefore, we recommend adhering to the 15 character limit to avoid confusion.

== map ActiveDirectory account to Service Principal Name (SPN) ==
create a service principal name (SPN) mapping using the setspn windows command line utility.  it is important to note that the ktpass utility (discussed below) also has options to create this mapping as part of the keytab generation process.

using setspn.exe:
{{{
LIST (inspect) MAPPINGS:
syntax - setspn -l activedirectory-account
sample - setspn -l myservice1

ADD new MAPPING:
syntax - setspn -a service/host.yourdomain.com activedirectory-account
sample - setspn -a ldap/service.yourdomain.com myservice1

REMOVE existing MAPPING:
syntax - setspn -d service/host.yourdomain.com activedirectory-account
sample - setspn -d ldap/service.yourdomain.com myservice1

RESET MAPPINGS:
syntax - setspn -r activedirectory-account
sample - setspn -r myservice1
}}}

NOTE: the "reset" mapping function is a bit mysterious.  i believe it is suppose to put the account back to the original creation state with regard to SPN mappings; however, interestingly the reset mapping function adds default SPNs that are not there when the account is created new.  these default mappings are typically not added until the account is bound to the AD (i.e. first connection).

== create a keytab ==
 # create a keytab using the ktpass utility at windows command line (see sample command below).
 # copy keytab to {{{$CATALINA_BASE/conf}}}

{{{
ktpass -princ HTTP/machine-name.yourdomain.edu@AD.YOURDOMAIN.EDU -mapuser YOURREALM\service-username$ -mapop set +rndPass -out s:\path\to\file\service-username.keytab -crypto RC4-HMAC-NT
}}}

*NOTE:* to specify a password, use the -pass parameter (followed by the password), rather than using the +rndPass parameter, which randomly generates one.

*NOTE:* to inspect the SPNs specify the list option on the setspn utility at the windows command line ({{{setspn -L service-username}}}).  The setspn command-line tool allows you to list and update (add, delete, reset) the SPNs directory property for an AD service account. Updating SPNs is rarely required (i.e. computer name change, requires the SPNs for installed services to be changed to match it.)

*NOTE:* the principal must match to machine name (is this true?)

*NOTE:* the computer account must match the one created above

== create jaas.conf ==
 # configure {{{jaas.conf}}} to accept SPNego tokens (see sample file below)
 # copy {{{jaas.conf}}} to {{{$CATALINA_BASE/conf}}}

{{{
...

/*
 * This module is configured using the default name.  At a minimum, it uses the
 * com.sun.security.auth.module.Krb5LoginModule module class with the required
 * flag set.
 */
jaasmine.login {
    com.sun.security.auth.module.Krb5LoginModule
    required;
};

/*
 * This is the configuration needed to support SPNego token validation.
 *
 * The com.sun.security.auth.module.Krb5LoginModule module class should be used
 * with the required flag set.  The following module options should be set:
 *
 * principal - a quoted string that is the server principal name
 * storeKey  - set this to true
 * useKeyTab - set this to true
 * keyTab    - a quoted string that is the absolute path to the keytab file.
 */
com.sun.security.jgss.krb5.accept {
    com.sun.security.auth.module.Krb5LoginModule
    required
    principal="HTTP/machine-name.yourdomain.edu@AD.YOURDOMAIN.EDU"
    storeKey=true
    useKeyTab=true
    keyTab="/path/to/file/service-username.keytab";
};

...
}}}

*NOTE:* the keytab file path and name must match one created above

*NOTE:* the principal must match the SPN specified in the keytab created above

== create krb5.conf ==
 # configure {{{krb5.conf}}} to accept SPNego tokens (see sample file below)
 # copy {{{krb5.conf}}} to {{{$CATALINA_BASE/conf}}}

{{{
...

[libdefaults]
default_realm = AD.YOURDOMAIN.EDU
forwardable = true
proxiable = true

[realms]
AD.YOURDOMAIN.EDU = {
 kdc = ad-dc-p1.ad.yourdomain.edu
 kdc = ad-dc-p2.ad.yourdomain.edu
 admin_server = ad-dc-p1.ad.yourdomain.edu
 }

...
}}}

== create setenv.sh =
 # configure {{{setenv.sh}}} to take the system props needed for krb5 authN (see sample file below)
 # copy {{{setenv.sh}}} to {{{$CATALINA_BASE/bin}}}

{{{
...

# Enable JAAS/KRB5 authN/authZ
CATALINA_OPTS="$CATALINA_OPTS -Djava.security.krb5.conf=/path/to/file/krb5.conf"
CATALINA_OPTS="$CATALINA_OPTS -Djava.security.auth.login.config=/path/to/file/jaas.conf"

# Enable debugging of Sun's krb5 login module & GSSAPI
CATALINA_OPTS="$CATALINA_OPTS -Dsun.security.krb5.debug=true"
CATALINA_OPTS="$CATALINA_OPTS -Dsun.security.jgss.debug=true"

# From <URL:http://forums.oracle.com/forums/thread.jspa?threadID=867326>
CATALINA_OPTS="$CATALINA_OPTS -Djavax.security.auth.useSubjectCredsOnly=false"

export CATALINA_OPTS

# Path to file containing the process ID of catalina java process
CATALINA_PID=/path/to/file/tomcat.pid
export CATALINA_PID

...
}}}

*NOTE:* the path to {{{java.security.krb5.conf}}} will vary

*NOTE:* the path to {{{java.security.auth.login.config}}} will vary

*NOTE:* the path to {{{CATALINA_PID}}} will vary

= Securing Web Services with JAASmine =
 # Follow the steps in the [JAASmineUsersGuide#Getting_Started] section for your server.
 # Deploy _jaasmine-core.jar_ with your web application or in the application server's shared/common classloader.
 # Add this servlet filter in your _WEB-INF/web.xml_ file:
{{{
    <filter>
        <filter-name>SPNegoFilter</filter-name>
        <filter-class>com.logiclander.jaasmine.authentication.http.SPNegoFilter</filter-class>
    </filter>
}}}
 # Set up the appropriate filter-mappings for your application's web services.  Be sure to map all the url-patterns to your web services.
 # Restart Tomcat.

= Securing uPortal with JAASmine =

= Securing Kuali Rice with JAASmine =
 # deploy custom rice {{{LoginFilter}}}
 # add JAASmine login filter
 # configure {{{web.xml}}} for rice
 # update {{{rice-config.xml}}} to use the {{{LoginFilter}}} (see sample file below)
 # restart tomcat

{{{
...

  <param name="filter.SPNegoLoginFilter.class">com.logiclander.jaasmine.authentication.http.SPNegoFilter</param>
  <param name="filtermapping.SPNegoLoginFilter.1">/remoting/*</param>
  <param name="filter.JaasLoginFilter.class">com.logiclander.jaasmine.authentication.http.JaasLoginFilter</param>
  <param name="filter.JaasLoginFilter.loginPath">/WEB-INF/jsp/login.jsp</param>
  <param name="filtermapping.JaasLoginFilter.2">/*</param-->

...
}}}